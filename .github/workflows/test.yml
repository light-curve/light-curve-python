name: Test

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python_minor: ['7', '8', '9', '10']

    defaults:
      run:
        working-directory: light-curve

    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Set up Python 3.${{ matrix.python_minor }}
      uses: actions/setup-python@v4
      with:
        python-version: "3.${{ matrix.python_minor }}"
    - name: Install tox
      run: pip install tox
    - name: Run Python tests
      run: tox -p -q -e py3${{ matrix.python_minor }}

  cargo-fmt:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Check Rust formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --manifest-path=light-curve/Cargo.toml -- --check

  cargo-clippy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Run Rust code analysis
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --manifest-path=light-curve/Cargo.toml --all-targets -- -D warnings

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
        - name: 'Linux, default features'
          os: 'ubuntu-latest'
          cargo_extra_args: '--locked'
          install_fftw: false
        - name: 'macOS, default features'
          os: 'macos-10.15'
          cargo_extra_args: '--locked'
          install_fftw: false
        - name: 'Linux, dynamically linked FFTW'
          os: 'ubuntu-latest'
          cargo_extra_args: '--locked --no-default-features --features fftw-dynamic'
          install_fftw: true
        - name: 'macOS, dynamically linked FFTW'
          os: 'macos-10.15'
          cargo_extra_args: '--locked --no-default-features --features fftw-dynamic'
          install_fftw: true
        - name: 'Linux, dynamically linked FFTW + GSL'
          os: 'ubuntu-latest'
          cargo_extra_args: '--locked --no-default-features --features fftw-dynamic,gsl'
          install_fftw: true
        - name: 'macOS, dynamically linked FFTW + GSL'
          os: 'macos-10.15'
          cargo_extra_args: '--locked --no-default-features --features fftw-dynamic,gsl'
          install_fftw: true
        - name: 'Linux, MKL + GSL'
          os: 'ubuntu-latest'
          cargo_extra_args: '--locked --no-default-features --features mkl,gsl'
          install_fftw: false
        - name: 'Windows, statically linked FFTW'
          os: 'windows-latest'
          cargo_extra_args: '--locked --no-default-features --features fftw-static'
          install_fftw: false

    defaults:
      run:
        working-directory: light-curve

    steps:
    - uses: actions/checkout@v3
    - name: Install GSL, macOS
      if: ${{ startsWith( matrix.os, 'macos' ) }}
      run: brew install gsl
    - name: Install FFTW, Linux
      if: ${{ matrix.install_fftw && startsWith( matrix.os, 'ubuntu' ) }}
      run: |
        sudo apt-get update
        sudo apt-get install libfftw3-dev
    - name: Install FFTW, macOS
      if: ${{ matrix.install_fftw && startsWith( matrix.os, 'macos' ) }}
      run: brew install fftw
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Set up Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install maturin
      run: pip install maturin
    - name: Build for ${{ matrix.name }}
      run: maturin build --manylinux=off --cargo-extra-args='${{ matrix.cargo_extra_args }}'

  msrv-build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: light-curve

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Get minimum supported Rust version
      run: echo "::set-output name=msrv::$(grep '^rust-version = ' Cargo.toml | grep -o '[0-9.]\+')"
      id: get_msrv
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ steps.get_msrv.outputs.msrv }}
    - name: Install maturin
      run: pip install maturin
    - name: Build
      run: |
        rustup default ${{ steps.get_msrv.outputs.msrv }}
        maturin build

  arm:

    runs-on: [self-hosted, linux, ARM64]

    defaults:
      run:
        working-directory: light-curve

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: maturin build
