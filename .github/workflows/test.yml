name: Test

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python_minor: ['7', '8', '9', '10', '11']

    defaults:
      run:
        working-directory: light-curve

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python 3.${{ matrix.python_minor }}
      uses: actions/setup-python@v4
      with:
        python-version: "3.${{ matrix.python_minor }}"
    - name: Install tox
      run: pip install tox
    - name: Run Python tests
      run: tox -e py3${{ matrix.python_minor }}

  cargo-fmt:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: cargo fmt --manifest-path=light-curve/Cargo.toml -- --check

  cargo-clippy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - run: cargo clippy --manifest-path=light-curve/Cargo.toml --all-targets -- -D warnings

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
        - name: 'Linux, default features'
          os: 'ubuntu-latest'
          maturin_build_args: '--locked'
          install_ceres: false
          install_fftw: false
        - name: 'macOS, default features'
          os: 'macos-11'
          maturin_build_args: '--locked'
          install_ceres: false
          install_fftw: false
        - name: 'Linux, system FFTW, source Ceres'
          os: 'ubuntu-latest'
          maturin_build_args: '--locked --no-default-features --features ceres-source,fftw-system'
          install_ceres: false
          install_fftw: true
        - name: 'macOS, system FFTW, source Ceres'
          os: 'macos-11'
          maturin_build_args: '--locked --no-default-features --features ceres-source,fftw-system'
          install_ceres: false
          install_fftw: true
        - name: 'Linux, system FFTW, system Ceres'
          os: 'ubuntu-latest'
          maturin_build_args: '--locked --no-default-features --features ceres-system,fftw-system'
          install_ceres: true
          install_fftw: true
        - name: 'macOS, system FFTW, system Ceres'
          os: 'macos-11'
          maturin_build_args: '--locked --no-default-features --features ceres-system,fftw-system'
          install_ceres: true
          install_fftw: true
        - name: 'Linux, system FFTW + GSL'
          os: 'ubuntu-latest'
          maturin_build_args: '--locked --no-default-features --features fftw-system,gsl'
          install_ceres: false
          install_fftw: true
        - name: 'macOS, system FFTW + GSL'
          os: 'macos-11'
          maturin_build_args: '--locked --no-default-features --features fftw-system,gsl'
          install_ceres: false
          install_fftw: true
        - name: 'Linux, MKL + GSL'
          os: 'ubuntu-latest'
          maturin_build_args: '--locked --no-default-features --features fftw-mkl,gsl'
          install_ceres: false
          install_fftw: false
        - name: 'Windows, statically linked FFTW for fftw-src'
          os: 'windows-latest'
          maturin_build_args: '--locked --no-default-features --features fftw-source'
          install_ceres: false
          install_fftw: false

    defaults:
      run:
        working-directory: light-curve

    env:
      # maturin sets it to 10.7, which is too low for Ceres
      MACOSX_DEPLOYMENT_TARGET: '10.9'

    steps:
    - uses: actions/checkout@v3
    - name:  GSL, macOS
      if: ${{ startsWith( matrix.os, 'macos' ) }}
      run: brew install gsl
    - name: Install CERES, Linux
      if: ${{ matrix.install_ceres && startsWith( matrix.os, 'ubuntu' ) }}
      run: |
        sudo apt-get update
        sudo apt-get install -y libunwind-dev
        sudo apt-get install -y libceres-dev
    - name: Install FFTW, macOS
      if: ${{ matrix.install_ceres && startsWith( matrix.os, 'macos' ) }}
      run: brew install ceres-solver
    - name: Install FFTW, Linux
      if: ${{ matrix.install_fftw && startsWith( matrix.os, 'ubuntu' ) }}
      run: |
        sudo apt-get update
        sudo apt-get install -y libfftw3-dev
    - name: Install FFTW, macOS
      if: ${{ matrix.install_fftw && startsWith( matrix.os, 'macos' ) }}
      run: brew install fftw
    - name: Set up Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Set up Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    - name: Install maturin
      run: pip install 'maturin>=0.14,<0.15'
    - name: Build for ${{ matrix.name }}
      run: maturin build --find-interpreter --manylinux=off ${{ matrix.maturin_build_args }}

  coverage:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: light-curve

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install maturin
        run: pip install $(python -c 'import tomllib; print(" ".join(tomllib.load(open("pyproject.toml", "rb"))["build-system"]["requires"]))')
      - name: Generate code coverage
        run: |
          source <(cargo llvm-cov show-env --export-prefix)
          python -m venv venv
          source venv/bin/activate
          maturin develop --extras=test
          python -m pytest
          cargo llvm-cov report --lcov --output-path lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true

  msrv-build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: light-curve

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Get minimum supported Rust version
      run: echo "::set-output name=msrv::$(grep '^rust-version = ' Cargo.toml | grep -o '[0-9.]\+')"
      id: get_msrv
    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ steps.get_msrv.outputs.msrv }}
    - name: Install maturin
      run: pip install 'maturin>=0.14,<0.15'
    - name: Build
      run: |
        rustup default ${{ steps.get_msrv.outputs.msrv }}
        maturin build --find-interpreter

  arm:

    runs-on: [self-hosted, linux, ARM64]

    defaults:
      run:
        working-directory: light-curve

    steps:
    - uses: actions/checkout@v3
    - name: install maturin
      run: pip install 'maturin[patchelf]>=0.14,<0.15'
    - name: Build
      run: maturin build
